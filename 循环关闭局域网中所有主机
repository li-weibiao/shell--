#!/bin/bash
#假设本机为 192.168.4.100,编写脚本关闭除自己外的其他所有主机
#脚本执行,需要提前给所有其他主机传递 ssh 密钥,满足无密码连接

for i in {1..254}
do
     [ $i -eq 100 ] && continue               #continue语句break命令类似，但它会导致当前迭代的循环退出，而不是整个循环。
     echo "正在关闭 192.168.4.$i..."
     ssh 192.168.4.$i poweroff
done
####################################
eg:
一、&& 和|| 在shell脚本中用于命令执行控制的功能。

例如：当下一个执行的命令依赖于上一个命令执行的结果时，可以通过&&和||实现。

语法格式：

command1 && command2 [&& command3 …]
command1 || command2 [|| command3 …]

1、命令之间使用 && （||）连接，实现逻辑与（或）的功能。

2、对于&&，只有在 && 左边的命令返回真的情况下，&& 右边的命令才会被执行。只要有一个命令为假，后面的命令都不会执行，即：短路的功能 。

3 、对于||有点不同于常规语法的“或“的功能，它是表示：只有在 || 左边的命令返回假，|| 右边的命令才会被执行。但是，只要有一个命令返回真，后面的命令就不会被执行，即：一直会运行到返回为真的命令时才会停止执行。

二、linux脚本运行时常会用到一些变量，大致如下：

$$：Shell本身的PID（ProcessID）
$!：Shell最后运行的后台Process的PID
$?：最后运行的命令的结束代码（返回值）
$-：使用Set命令设定的Flag一览
$*：所有参数列表。用”$1” “$2” … “$n” 来获取参数值。
$@：所有参数列表。用”$1” “$2” … “$n” 来获取参数值。
$#：添加到Shell的参数个数
$0：Shell本身的文件名
$1～$n：添加到Shell的各参数值。$1是第1参数、$2是第2参数…。

e.g.:#!/bin/bash

echo “File Name: $0”;

echo “First Parameter : $1”;

echo “First Parameter : $2”;

echo “Quoted Values: $@”;

echo “Quoted Values: $*”;

echo “Total Number of Parameters : $#”

运行结果：
$./test.sh Zara Ali
File Name : ./test.sh
First Parameter : Zara
Second Parameter : Ali
Quoted Values: Zara Ali
Quoted Values: Zara Ali
Total Number of Parameters : 2

三、∗和

@ 的区别

∗和
@ 都表示传递给函数或脚本的所有参数，不被双引号(” “)包含时，都以”1""

2” … “$n” 的形式输出所有参数。

但是当它们被双引号(” “)包含时，”∗"会将所有的参数作为一个整体，以"
1 2…n”的形式输出所有参数；”@"会将各个参数分开，以"1” “2"…"

n” 的形式输出所有参数。

e.g.:#!/bin/bash
echo “$*=” ∗echo“\”$∗\”=”“

*”

echo “$@=” @echo“\”$@\”=”“

@”

echo “print each param from $*”
for var in ∗doecho“

var”
done

echo “print each param from $@”
for var in @doecho“

var”
done

echo “print each param from \”$*\””
for var in “∗”doecho“

var”
done

echo “print each param from \”$@\””
for var in “@”doecho“

var”
done

执行 ./test.sh “a” “b” “c” “d”，看到下面的结果：
∗=abcd“
*”= a b c d
@=abcd“@”= a b c d
print each param from ∗abcdprinteachparamfrom@
a
b
c
d
print each param from “∗”abcdprinteachparamfrom“@”
a
b
c
d
########################################################



到目前为止，我们已经看到了，创建循环和使用循环来完成不同的任务。有时候，你需要停止循环或跳过循环迭代。

在本教程中，您将了解以下两个语句用于控制 Shell 循环：

    break 语句

    continue 语句

无限循环：

循环有限的生命，他们跳出来，一旦条件是 false 还是 false 取决于循环。

由于所需的条件是不符合一个循环可能永远持续下去。永远不会终止执行一个循环执行无限次数。出于这个原因，这样的循环被称为无限循环。
例子：

下面是一个简单的例子，使用while循环显示数字0到9：

#!/bin/sh

a=10

while [ $a -lt 10 ]
do
   echo $a
   a=`expr $a + 1`
done

这个循环将永远持续下去，因为常是大于10，它永远不会成为小于10。所以这是无限循环真实的例子。
break语句：

break语句用于终止整个循环的执行，完成后所有行代码break语句的执行。然后，它逐级的代码跟在循环结束。
语法

将用于以下break语句退出循环：

break

将用于以下break语句退出循环：

break n

这里n指定的第n个封闭的循环退出。
例子：

下面是一个简单的例子展示了循环将终止只要一变为5：

#!/bin/sh

a=0

while [ $a -lt 10 ]
do
   echo $a
   if [ $a -eq 5 ]
   then
      break
   fi
   a=`expr $a + 1`
done

这将产生以下结果：

0
1
2
3
4
5

下面是一个简单的嵌套循环的例子。这个脚本打破两个循环，如果的 var1 等于2 和 var2 等于0：

#!/bin/sh

for var1 in 1 2 3
do
   for var2 in 0 5
   do
      if [ $var1 -eq 2 -a $var2 -eq 0 ]
      then
         break 2
      else
         echo "$var1 $var2"
      fi
   done
done

这将产生以下结果。内循环有一个 break 命令与参数2。这表明，如果条件得到满足应该跳出外循环，并最终从内循环跳出。

1 0
1 5

continue 语句:

continue语句break命令类似，但它会导致当前迭代的循环退出，而不是整个循环。

这种参数是有用的，当一个错误已经发生，但你想尝试执行下一个循环迭代。
语法

continue

和break语句一样，一个整数参数可以给continue命令跳过嵌套循环的命令。

continue n

这里n指定第n个封闭循环 continue 。
例子：

下面的循环利用continue语句返回，并开始处理下一个语句：

#!/bin/sh

NUMS="1 2 3 4 5 6 7"

for NUM in $NUMS
do
   Q=`expr $NUM % 2`
   if [ $Q -eq 0 ]
   then
      echo "Number is an even number!!"
      continue
   fi
   echo "Found odd number"
done

这将产生以下结果：

Found odd number
Number is an even number!!
Found odd number
Number is an even number!!
Found odd number
Number is an even number!!
Found odd number

