#!/bin/bash
for i in {1..254}
do
ping -c2 -i0.3 -W1 192.168.4.$i &>/dev/null
if [ $? -eq 0 ];then
  echo "192.168.4.$i is up"
else
  echo "192.168.4.$i is down"
fi
done
###################################################
#!/bin/bash
i=1
while [ $i -le 254 ]
do
  ping -c2 -i0.3 -W1 192.168.4.$i &>/dev/null
  if [ $? -eq 0 ];then
    echo "192.168.4.$i is up"
  else
    echo "192.168.4.$i is down"
  fi
  let i++
  done
  ###################################################
 eg:这条语句中各个参数的意义为:
-c表示的是ping的次数（linux系统下并不会像windows一样ping四次后停止），后面的3为ping三次后终止。
-i表示的是两次ping访问之间的时间间隔，0.2参数表示的是间隔0.2s
-W表示的是定义等待超时的时间，3表示的是超过三秒钟就定义为ping不通
$i为输入的参数
&> /dev/null表示的是用完的参数自动存入一个没有回收功能的垃圾箱
$?参数表示的是若前面的语句执行成功，则会返回0，若执行不成功，则会返回非0数据。
-eq 为前者是否等于后者。
 ###################################################
  #!/bin/bash
  #定义一个函数，ping 某一台主机，并检测主机的存活状态
  myping(){
  ping -c2 -i0.3 -W1 $1 &>/dev/null
  if [ $? -eq 0 ];then
    echo "$1 is up"
  else
    echo "$1 is down"
  fi
  }
  for i in {1..254}
  do 
    myping 192.168.4.$i &
  done
  wait
  #使用&符号，将执行的函数放入后台执行，wait等待所有进程结束后退出脚本
  #这样做的好处是不需要等待ping第一台主机的回应，就可以继续并发ping第二台主机，依次类推。
  

